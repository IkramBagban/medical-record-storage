// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-3.0.x", "linux-arm64-openssl-3.0.x", "rhel-openssl-1.0.x"]
  output        = "../src/generated/client"
 }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  FREEMIUM
  PREMIUM
}

enum UserRole {
  PATIENT
  CAREGIVER
  DEPENDENT
}

model User {
  id          String      @id @default(cuid())
  email       String      @unique
  name        String
  accountType AccountType
  role        UserRole
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  records         Record[] @relation("RecordOwner")
  uploadedRecords Record[] @relation("RecordUploader")

  sentCaregiverRequests     CaregiverRequest[]  @relation("CaregiverRequester")
  receivedCaregiverRequests CaregiverRequest[]  @relation("Patient")
  AuditLog                  AuditLog[]
  EmergencySnapshot         EmergencySnapshot[]
  OCRResult                 OCRResult[]
  Subscription              Subscription[]
  PlanLimit                 PlanLimit[]
}

model OtpVerification {
  id        String   @id @default(cuid())
  email     String
  otp       String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([email, otp])
  @@index([email])
}

enum Ownership {
  SELF
  DEPENDENT
}

enum RecordType {
  PRESCRIPTION
  LAB_REPORT
  SCAN
  CONSULTATION
  VACCINATION
  MEDICAL_CERTIFICATE
  OTHER
}

model Record {
  id         String     @id @default(cuid())
  title      String
  type       RecordType
  language   String     @default("en")
  tags       String[]
  fileKey    String     @unique()
  fileName   String
  fileSize   Int
  mimeType   String
  recordDate DateTime
  isDeleted  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  ownerId String
  owner   User   @relation("RecordOwner", fields: [ownerId], references: [id])

  uploaderId String
  uploader   User   @relation("RecordUploader", fields: [uploaderId], references: [id])

  @@index([ownerId])
  @@index([uploaderId])
}

enum CaregiverRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model CaregiverRequest {
  id          String                 @id @default(cuid())
  caregiverId String
  patientId   String
  status      CaregiverRequestStatus @default(PENDING)
  message     String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  caregiver User @relation("CaregiverRequester", fields: [caregiverId], references: [id])
  patient   User @relation("Patient", fields: [patientId], references: [id])

  @@unique([caregiverId, patientId])
}

enum AuditLogStatus {
  SUCCESS
  FAILURE
}

enum AuditLogAction {
  LOGIN_OTP_SENT
  LOGIN_VERIFIED

  SIGNUP_OTP_SENT
  SIGNUP_VERIFIED

  RECORD_UPLOAD_GET_URL
  RECORD_UPLOAD
  RECORDS_VIEWED
  RECORD_VIEWED
  RECORD_DELETE

  CAREGIVER_ACCESS_REQUEST
  CAREGIVER_APPROVED
  CAREGIVER_REQUEST_VIEWED

  EMERGENCY_SNAPSHOT_GENERATED
  EMERGENCY_SNAPSHOT_VIEWED

  OCR_FILE_UPLOADED
  OCR_FILE_PROCESSED
  OCR_RESULTS_VIEWED
}

enum AuditLogTargetType {
  USER
  RECORD
  CAREGIVER_REQUEST
  EMERGENCY
}

model AuditLog {
  id          String              @id @default(cuid())
  userId      String?
  action      String
  description String?
  targetId    String?
  targetType  AuditLogTargetType?
  ipAddress   String?
  status      AuditLogStatus
  timestamp   DateTime            @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model EmergencySnapshot {
  id          String   @id @default(cuid())
  qrToken     String   @unique
  userId      String
  title       String
  description String?
  recordIds   String[]
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([qrToken])
}

enum OcrStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model OCRResult {
  id            String    @id @default(cuid())
  fileKey       String    @unique()
  fileName      String
  mimeType      String
  extractedData Json?
  status        OcrStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  @@index([ownerId])
  @@index([fileKey])
}

enum PlayType {
  FREEMIUM
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

model Subscription {
  id       String             @id @default(cuid())
  planType PlayType
  userId   String
  status   SubscriptionStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  planLimit PlanLimit?

  @@unique([userId, status])
  @@index([userId])
}

enum PlanLimitStatus {
  ACTIVE
  INACTIVE
}

model PlanLimit {
  id             String @id @default(cuid())
  totalRecords   Int
  subscriptionId String @unique

  status       PlanLimitStatus
  subscription Subscription    @relation(fields: [subscriptionId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionId])
  @@index([userId])
}
